name: CI/CD Pipeline

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      id: docker_build
      shell: pwsh
      run: |
        $date = Get-Date -Format "yyyyMMddHHmmss"
        $env:IMAGE_TAG = $date
        docker build -t ${{ secrets.DOCKER_USERNAME }}/wisecowrepo:$env:IMAGE_TAG .
        docker push ${{ secrets.DOCKER_USERNAME }}/wisecowrepo:$env:IMAGE_TAG
        echo "IMAGE_TAG=$env:IMAGE_TAG" >> $env:GITHUB_ENV

    - name: Update deployment.yaml with new image tag
      shell: pwsh
      run: |
        $content = Get-Content deployment.yaml
        $newContent = $content -replace "image: ${{ secrets.DOCKER_USERNAME }}/wisecowrepo:.*", "image: ${{ secrets.DOCKER_USERNAME }}/wisecowrepo:$env:IMAGE_TAG"
        Set-Content deployment.yaml $newContent

    - name: Commit and push updated deployment.yaml
      env:
        PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      shell: pwsh
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add deployment.yaml
        git commit -m "Update deployment image to ${{ secrets.DOCKER_USERNAME }}/wisecowrepo:$env:IMAGE_TAG"
        git push origin HEAD:main

    - name: Install OpenSSL (Chocolatey)
      shell: pwsh
      run: |
        if (-Not (Get-Command choco -ErrorAction SilentlyContinue)) {
          Set-ExecutionPolicy Bypass -Scope Process -Force;
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
          Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'));
        }
        choco install openssl -y

    - name: Generate TLS certificates
      shell: pwsh
      run: |
        & 'C:\Program Files\OpenSSL-Win64\bin\openssl.exe' req -x509 -nodes -days 365 -newkey rsa:2048 `
          -keyout tls.key -out tls.crt `
          -subj "/C=IN/ST=Karnataka/L=Bangalore/O=My Company/CN=wisecow.com" `
          -addext "subjectAltName=DNS:wisecow.com,DNS:www.wisecow.com"

    - name: Start Minikube
      shell: pwsh
      run: |
        minikube start --driver=docker

    - name: Status of Minikube
      shell: pwsh
      run: |
        minikube status

    - name: Wait for Minikube to be ready
      shell: pwsh
      run: |
        while (-Not (minikube status | Select-String -Pattern "host: Running")) { Start-Sleep -Seconds 5 }
        while (-Not (minikube status | Select-String -Pattern "kubelet: Running")) { Start-Sleep -Seconds 5 }
        while (-Not (minikube status | Select-String -Pattern "apiserver: Running")) { Start-Sleep -Seconds 5 }

    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Set up Kubeconfig
      shell: pwsh
      run: |
        mkdir -p $HOME\.kube
        $env:KUBECONFIG = "$HOME\.kube\config"
        minikube update-context

    - name: Create ingress-nginx namespace if not exists
      shell: pwsh
      run: |
        kubectl create namespace ingress-nginx -o yaml --dry-run=client | kubectl apply -f -

    - name: Deploy Ingress Controller
      shell: pwsh
      run: |
        kubectl apply -f deploy.yaml -n ingress-nginx

    - name: Verify Ingress Controller Deployment
      shell: pwsh
      run: |
        kubectl get all -n ingress-nginx

    - name: Wait for Ingress Controller to be ready
      shell: pwsh
      run: |
        kubectl wait --namespace ingress-nginx `
          --for=condition=ready pod `
          --selector=app.kubernetes.io/component=controller `
          --timeout=300s || kubectl describe all -n ingress-nginx

    - name: Wait for Webhook Service to be ready
      shell: pwsh
      run: |
        kubectl wait --namespace ingress-nginx `
          --for=condition=available svc/ingress-nginx-controller-admission `
          --timeout=300s || kubectl describe svc/ingress-nginx-controller-admission -n ingress-nginx

    - name: Create Kubernetes secret for TLS
      shell: pwsh
      run: |
        kubectl create namespace wisecow -o yaml --dry-run=client | kubectl apply -f -
        kubectl create secret tls wisecow-tls --cert=tls.crt --key=tls.key -n wisecow

    - name: Verify TLS secret
      shell: pwsh
      run: |
        kubectl get secret wisecow-tls -n wisecow

    - name: Deploy Application with Retries
      shell: pwsh
      run: |
        for ($i = 1; $i -le 5; $i++) {
          kubectl apply -f deployment.yaml -n wisecow
          if ($?) {
            kubectl apply -f service.yaml -n wisecow
            kubectl apply -f ingress.yaml -n wisecow
            break
          } else {
            Write-Output "Retry $i..."
            Start-Sleep -Seconds 15
          }
        }

    - name: Wait for 30 seconds
      shell: pwsh
      run: Start-Sleep -Seconds 30

    - name: Check Deployment Status
      shell: pwsh
      run: |
        kubectl get pods -n wisecow
        kubectl get svc -n wisecow
        kubectl get ingress -n wisecow

    - name: Describe Resources for Debugging
      shell: pwsh
      run: |
        kubectl describe pods -n wisecow
        kubectl describe svc -n wisecow
        kubectl describe ingress -n wisecow

    - name: Get Minikube IP
      id: get_minikube_ip
      shell: pwsh
      run: |
        $MINIKUBE_IP = minikube ip
        echo "MINIKUBE_IP=$MINIKUBE_IP" >> $env:GITHUB_ENV

    - name: Display Minikube IP
      shell: pwsh
      run: echo "Add the following line to your /etc/hosts file:${{ env.MINIKUBE_IP }} wisecow.com"

    - name: Get NodePort
      id: get_nodeport
      shell: pwsh
      run: |
        $NODE_PORT = kubectl get svc wisecow-service -n wisecow -o=jsonpath='{.spec.ports[0].nodePort}'
        echo "NODE_PORT=$NODE_PORT" >> $env:GITHUB_ENV

    - name: Display Application URL
      shell: pwsh
      run: echo "Access your application at http://wisecow.com:${{ env.NODE_PORT }}"

    - name: Fetch Ingress Controller Logs
      shell: pwsh
      run: |
        kubectl logs -l app.kubernetes.io/component=controller -n ingress-nginx

    - name: Check Deployment Status Again
      shell: pwsh
      run: |
        kubectl get pods -n wisecow
        kubectl get svc -n wisecow
        kubectl describe service wisecow-service -n wisecow
        kubectl get ingress -n wisecow
        kubectl describe ingress wisecow-ingress -n wisecow
        kubectl get endpoints -n wisecow
