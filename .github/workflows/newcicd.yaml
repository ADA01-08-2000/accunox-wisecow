name: CI/CD Pipeline

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      id: docker_build
      run: |
        IMAGE_TAG=$(date +%Y%m%d%H%M%S)
        docker build -t ${{ secrets.DOCKER_USERNAME }}/wisecowrepo:$IMAGE_TAG .
        docker push ${{ secrets.DOCKER_USERNAME }}/wisecowrepo:$IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Update deployment.yaml with new image tag
      run: |
        sed -i "s|image: ${{ secrets.DOCKER_USERNAME }}/wisecowrepo:.*|image: ${{ secrets.DOCKER_USERNAME }}/wisecowrepo:${{ env.IMAGE_TAG }}|g" deployment.yaml

    - name: Commit and push updated deployment.yaml
      env:
        PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add deployment.yaml
        git commit -m "Update deployment image to ${{ secrets.DOCKER_USERNAME }}/wisecowrepo:${{ env.IMAGE_TAG }}"
        git push origin HEAD:main

    - name: Install OpenSSL
      run: |
        sudo apt-get update
        sudo apt-get install -y openssl

    - name: Generate TLS certificates
      run: |
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout tls.key -out tls.crt \
          -subj "/C=IN/ST=Karnataka/L=Bangalore/O=My Company/CN=wisecow.com" \
          -addext "subjectAltName=DNS:wisecow.com,DNS:www.wisecow.com"

    - name: Start Minikube
      run: |
        minikube start --driver=docker

    - name: Status of Minikube
      run: |
        minikube status

    - name: Wait for Minikube to be ready
      run: |
        until minikube status | grep -q "host: Running"; do sleep 5; done
        until minikube status | grep -q "kubelet: Running"; do sleep 5; done
        until minikube status | grep -q "apiserver: Running"; do sleep 5; done

    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        export KUBECONFIG=$HOME/.kube/config
        minikube update-context

    - name: Create ingress-nginx namespace if not exists
      run: |
        kubectl create namespace ingress-nginx || true

    - name: Deploy Ingress Controller
      run: |
        kubectl apply -f deploy.yaml -n ingress-nginx

    - name: Verify Ingress Controller Deployment
      run: |
        kubectl get all -n ingress-nginx

    - name: Wait for Ingress Controller to be ready
      run: |
        kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=300s || kubectl describe all -n ingress-nginx

    - name: Wait for Webhook Service to be ready
      run: |
        kubectl wait --namespace ingress-nginx \
          --for=condition=available svc/ingress-nginx-controller-admission \
          --timeout=300s || kubectl describe svc/ingress-nginx-controller-admission -n ingress-nginx

    - name: Create Kubernetes secret for TLS
      run: |
        kubectl create namespace wisecow || true
        kubectl create secret tls wisecow-tls --cert=tls.crt --key=tls.key -n wisecow

    - name: Verify TLS secret
      run: |
        kubectl get secret wisecow-tls -n wisecow

    - name: Deploy Application with Retries
      run: |
        for i in {1..5}; do
          kubectl apply -f deployment.yaml -n wisecow && \
          kubectl apply -f service.yaml -n wisecow && \
          kubectl apply -f ingress.yaml -n wisecow && break || \
          { echo "Retry $i..."; sleep 15; }
        done

    - name: Wait for 30 seconds
      run: sleep 30

    - name: Check Deployment Status
      run: |
        kubectl get pods -n wisecow
        kubectl get svc -n wisecow
        kubectl get ingress -n wisecow

    - name: Describe Resources for Debugging
      run: |
        kubectl describe pods -n wisecow
        kubectl describe svc -n wisecow
        kubectl describe ingress -n wisecow

    - name: Get Minikube IP
      id: get_minikube_ip
      run: |
        MINIKUBE_IP=$(minikube ip)
        echo "MINIKUBE_IP=$MINIKUBE_IP" >> $GITHUB_ENV

    - name: Display Minikube IP
      run: echo "Add the following line to your /etc/hosts file:${{ env.MINIKUBE_IP }} wisecow.com"

    - name: Get NodePort
      id: get_nodeport
      run: |
        NODE_PORT=$(kubectl get svc wisecow-service -n wisecow -o=jsonpath='{.spec.ports[0].nodePort}')
        echo "NODE_PORT=$NODE_PORT" >> $GITHUB_ENV

    - name: Install Ngrok
      run: |
        wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
        unzip ngrok-stable-linux-amd64.zip
        sudo mv ngrok /usr/local/bin

    - name: Start Ngrok
      run: |
        nohup ngrok http $(minikube ip):${{ env.NODE_PORT }} > /dev/null 2>&1 &

    - name: Get Ngrok URL
      id: get_ngrok_url
      run: |
        sleep 10
        NGROK_URL=$(curl --silent --show-error http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
        echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV

    - name: Display Application URL
      run: echo "Access your application at ${{ env.NGROK_URL }}"

    - name: Fetch Ingress Controller Logs
      run: |
        kubectl logs -l app.kubernetes.io/component=controller -n ingress-nginx

    - name: Check Deployment Status Again
      run: |
        kubectl get pods -n wisecow
        kubectl get svc -n wisecow
        kubectl describe service wisecow-service -n wisecow
        kubectl get ingress -n wisecow
        kubectl describe ingress wisecow-ingress -n wisecow
        kubectl get endpoints -n wisecow
